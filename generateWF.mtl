[comment encoding = UTF-8 /]

[module generateWF('http://fr.ubo.mde.aitMaksene.wfwps')]

[template public generateWF(aWorkFlow : WorkFlow)]
[comment @main/]
[file (aWorkFlow.identifier.concat('_class').toUpperFirst().concat('.java'), false, 'UTF-8')]
package [aWorkFlow.eContainer().oclAsType(WorflowWps).projectName.concat('.WPSpackage')/];

import org.geotools.process.factory.DescribeParameter;
import org.geotools.process.factory.DescribeProcess;
import org.geotools.process.factory.DescribeResult;
import org.geotools.process.factory.StaticMethodsProcessFactory;
import org.geotools.text.Text;

public class [aWorkFlow.identifier.concat('_class').toUpperFirst()/]
             extends StaticMethodsProcessFactory<[aWorkFlow.identifier.concat('_class').toUpperFirst()/]>
{
	public [aWorkFlow.identifier.concat('_class').toUpperFirst()/]()
	{
		super(Text.text("Tests on wps"),"test WPS",[aWorkFlow.identifier.concat('_class').toUpperFirst()/].class);
	}

	@DescribeProcess(title="[aWorkFlow.title/]",description="[aWorkFlow.abstract/]")
	@DescribeResult(name="[aWorkFlow.outputs->at(1).identifier/]",description="[aWorkFlow.outputs->at(1).abstract/]")
	
	public static [aWorkFlow.outputs->at(1).type/] [aWorkFlow.identifier/]([for(input : Input | aWorkFlow.inputs)
    separator(',')]@DescribeParameter(name="[input.identifier/]",description=" [input.abstract/]")
     [input.type/] [input.identifier/][/for])
	{
 	

                 [for(aWPS: WPS|aWorkFlow.wps)]
			     	[for (input:Input | aWPS.inputs)]
						[if(input.type = WPStype::Raster)]
							BufferedImage  [input.identifier/];
						[/if]	
					[/for]
				 [/for]

				[for(aWPS: WPS|aWorkFlow.wps)]
			     	[for (input:Input | aWPS.inputs)]
						[if(input.type = ReferencedData)]
							BufferedImage  rdImage[i/];
						[/if]	
					[/for]
				 [/for]


				[aWorkFlow.outputs->at(1).type/] [aWorkFlow.outputs->at(1).identifier/];
					[for(aWPS: WPS|aWorkFlow.wps)]
						[for (input:Input | aWPS.inputs )]
							[if(aWorkFlow.inputs-> excludes(input))]
								[input.type/] [input.identifier/];
							[/if]	
						[/for]

						[for (output:Output | aWPS.outputs )]
							[if( aWorkFlow.outputs-> excludes(output))]
								[output.type/] [output.identifier/];
							[/if]
						[/for]
					[/for]
	
		
	
		[comment Appel de WMS/]
		[for(aWPS: WPS|aWorkFlow.wps)]
				[for (input:Input | aWPS.inputs )]
					[if(input.type)=WPStype::Raster]
						WMSrequest aWMSrequest = new WMSrequest("atlas.gc.ca/cgi-bin/atlaswms_en", "png",583,420,"EPSG:4326",
				           -131.13151509433965,46.60532747661736,-117.61620566037737,56.34191403281659);
						rdImage[i/]= aWMSrequest.Call();

                		 [for(aLink:Link|aWorkFlow.links)]
							[for(input:Input|aWPS.inputs)]
								[if(aWPS.inputs->at(1) = aLink.output)]
									[aLink.output.identifier/]	=  rdImage[i/];
								[/if]
							[/for]
						[/for]
					
					[/if]
				[/for]
			[/for]	

			[for(aWPS: WPS|aWorkFlow.wps)]
				[if (aWPS.oclIsTypeOf(LocalWPS))]
					[aWPS.outputs->at(1).identifier/] = [aWPS.oclAsType(LocalWPS).functionName/]
		    			([for(inp: Input |aWPS.inputs)separator(',')][inp.identifier/][/for]);

					
				[comment Appel de WPS dans le cas de RemoteWPS/]			
				[else]
					RemoteWpsCall wpscallFinal= new RemoteWpsCall("http://localhost:8080/geoserver/ows","WPS:add");
					ArrayList<Object> inputs= new ArrayList<Object>();
					int o1=1;
					int o2=2;
					inputs.add(o1);
					inputs.add(o2);
					res = wpscallFinal.Request(inputs);
				[/if]
			[comment propagation des sorties/]
			[for(aLink: Link|aWorkFlow.links)]
								[if(aWPS.outputs->at(1)=aLink.input)]
									[aLink.output.identifier/]=[aWPS.outputs->at(1).identifier/];
								[/if]
			[/for]	
					
			[/for]	
	
			return [aWorkFlow.outputs->at(1).identifier/];

			
		
	
	
	}
}


[/file]

[/template]
