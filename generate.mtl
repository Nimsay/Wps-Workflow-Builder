[comment encoding = UTF-8 /]
[module generateWPS('http://fr.ubo.mde.aitMaksene.wfwps')]

[template public generateWPS(aWPS : WPS)]
[comment @main/]
[file (aWPS.identifier.concat('_class').toUpperFirst().concat('.java'), false, 'UTF-8')]
[if (aWPS.oclIsTypeOf(LocalWPS))]
package [aWPS.eContainer().oclAsType(WorflowWps).projectName.concat('.WPSpackage')/];

import org.geotools.process.factory.DescribeParameter;
import org.geotools.process.factory.DescribeProcess;
import org.geotools.process.factory.DescribeResult;
import org.geotools.process.factory.StaticMethodsProcessFactory;
import org.geotools.text.Text;

public class [aWPS.identifier.concat('_class').toUpperFirst()/] extends StaticMethodsProcessFactory<[aWPS.identifier.concat('_class').toUpperFirst()/]>
{
	public [aWPS.identifier.concat('_class').toUpperFirst()/]()
	{
		super(Text.text("Tests on wps"),"test WPS",[aWPS.identifier.concat('_class').toUpperFirst()/].class);
	}

	@DescribeProcess(title="[aWPS.title/]",description="[aWPS.abstract/]")
	@DescribeResult(name="[aWPS.outputs->at(1).identifier/]",description="[aWPS.outputs->at(1).abstract/]")
	
	public static [aWPS.outputs->at(1).type/] [aWPS.identifier/]([for(input : Input | aWPS.inputs)
    separator(',')]@DescribeParameter(name="[input.identifier/]",description=" [input.abstract/]")
     [input.type/] [input.identifier/][/for])
	{
		[aWPS.outputs->at(1).type/] [aWPS.outputs->at(1).identifier/];
[comment cast de wps en local wps/]		
		[aWPS.outputs->at(1).identifier/] = [aWPS.oclAsType(LocalWPS).functionName/]([for(input : Input | aWPS.inputs) 
              separator(',')] [input.identifier/][/for]);
		
		return [aWPS.outputs->at(1).identifier/];
	}
}

[else]
	    // glue code to generate
[/if]
[/file]

[/template]
